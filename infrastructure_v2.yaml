AWSTemplateFormatVersion: 2010-09-09
Description: Infrastructure setup

Parameters:
  VPCIdentifier:
    Type: String
    Description: VPC Identifier
    Default: '3114394F'

  LatestAL2023AmiId:
    Description: Latest EC2 Amazon Linux 2023 AMI from Systems Manager Parameter Store
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64'

  InstanceType:
    Type: String
    Default: t2.micro
    Description: EC2 instance type


  VPCNetworkAddress:
    Type: String
    Description: asd
    Default: 10.0.0.0/16


  SSHSanitizeAreaOneNetworkAddress:
    Type: String
    Description: Network Address for SSH Sanitize Area Subnet One
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Default: 10.0.1.0/24

  SSHSanitizeAreaTwoNetworkAddress:
    Type: String
    Description: Network Address for SSH Sanitize Area Subnet Two
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Default: 10.0.2.0/24

  PrivateWebServerSubnetOneNetworkAddress:
    Type: String
    Description: Network Address for Public Web Server Subnet One
    Default: 10.0.3.0/24

  PrivateWebServerSubnetTwoNetworkAddress:
    Type: String
    Description: Network Address for Public Web Server Subnet Two
    Default: 10.0.4.0/24

  PrivateDBSubnetOneNetworkAddress:
    Type: String
    Description: Network Address for Private DB Subnet One
    Default: 10.0.5.0/24

  PrivateDBSubnetTwoNetworkAddress:
    Type: String
    Description: Network Address for Private DB Subnet Two
    Default: 10.0.6.0/24
  

Resources:

############################################################################
# NETWORK LAYER 
############################################################################

  ##################
  # ProductionVPC
  # Layer Type: Network Layer 
  # Description:
  ##################

  ProductionVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCNetworkAddress
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref VPCIdentifier




  ##################
  # Public Web Server Subnet One 
  # Layer Type: Network Layer 
  # Description:
  ##################

  PrivateWebServerSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateWebServerSubnetOneNetworkAddress
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      VpcId: !Ref ProductionVPC
      Tags:
        - Key: Name
          Value: "Public Web Server Subnet One"



  ##################
  # Public Web Server Subnet Two
  # Layer Type: Network Layer 
  # Description:
  ##################
  PrivateWebServerSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateWebServerSubnetTwoNetworkAddress
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      VpcId: !Ref ProductionVPC
      Tags:
        - Key: Name
          Value: "Public Web Server Subnet Two"



  ##################
  # Private DB Subnet 1 
  # Layer Type: Network Layer 
  # Description:
  ##################

  PrivateDBSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateDBSubnetOneNetworkAddress
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      VpcId: !Ref ProductionVPC
      Tags: 
        - Key: Name
          Value: "Private DB Subnet One"


  ##################
  # Private DB Subnet 2 
  # Layer Type: Network Layer 
  # Description:
  ##################
  PrivateDBSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateDBSubnetTwoNetworkAddress
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      VpcId: !Ref ProductionVPC
      Tags: 
        - Key: Name
          Value: "Private DB Subnet Two"



############################################################################
## INTERNET GATEWAY
## Layer Type: Network Layer
############################################################################     
    
  ProductionVPCInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags:
        - Key: "Name"
          Value: "Production VPC Internet Gateway"


  AttachInternetGatewayToVPC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
        InternetGatewayId: 
          Ref: ProductionVPCInternetGateway
        VpcId: 
          Ref: ProductionVPC



  ##################
  # SSH Sanitize Area One Subnet
  # Layer Type: Network Layer 
  # Description: 
  ##################

  SSHSanitizeAreaSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 
        Ref: SSHSanitizeAreaOneNetworkAddress
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      VpcId: !Ref ProductionVPC
      Tags:
        - Key: Name
          Value: "SSH Sanitize Area Subnet One"


  ##################
  # SSH Sanitize Area Two Subnet
  # Layer Type: Network Layer 
  # Description: 
  ##################

  SSHSanitizeAreaSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 
        Ref: SSHSanitizeAreaTwoNetworkAddress
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      VpcId: !Ref ProductionVPC
      Tags:
        - Key: Name
          Value: "SSH Sanitize Area Subnet Two"

  


############################################################################
##  Public SSH Sanitize Area 1 ROUTING TABLE CONFIGURATION
############################################################################

  PublicSSHSanitizeAreaOneRoutingTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: 
        Ref: ProductionVPC
      Tags:
        - Key: Name
          Value: "Public SSH Sanitize Area Routing Table"

  SubnetOneRoutingTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: 
        Ref: PublicSSHSanitizeAreaOneRoutingTable
      SubnetId:
        Ref: SSHSanitizeAreaSubnetOne

  RouteToInternetFromSSHSanitizeAreaSubnet1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicSSHSanitizeAreaOneRoutingTable
      GatewayId: 
        Ref: ProductionVPCInternetGateway
      DestinationCidrBlock: '0.0.0.0/0'



############################################################################
##  Public SSH Sanitize Area 2 ROUTING TABLE CONFIGURATION
############################################################################

  PublicSSHSanitizeAreaTwoRoutingTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ProductionVPC
      Tags:
        - Key: Name
          Value: "Private Subnet Routing Table"

  SubnetTwoRoutingTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: 
        Ref: PublicSSHSanitizeAreaTwoRoutingTable
      SubnetId: 
        Ref: SSHSanitizeAreaSubnetTwo

  RouteToInternetFromSSHSanitizeAreaSubnet2:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId:
          Ref: PublicSSHSanitizeAreaTwoRoutingTable
        GatewayId: 
          Ref: ProductionVPCInternetGateway
        DestinationCidrBlock: '0.0.0.0/0'


############################################################################
##  SSH Sanitize Area ACCESS CONTROL LIST 1 CONFIGURATION
############################################################################

#Network ACL will act as a network trap for cloud monitoring to obtain data from

  ##################
  # SSH Sanitize Area ACL 1
  # Layer Type: Network Layer 
  # Description:
  ##################
  SSHSanitizeAreaSubnetOneACL:
    Type: AWS::EC2::NetworkAcl
    Properties: 
      VpcId: 
        Ref: ProductionVPC
      Tags:
        - Key: Name
          Value: "SSH Sanitize Area ACL 1"

  ##################
  # SSH Sanitize Area Subnet 1 ACL Association
  # Layer Type: Network Layer 
  # Description: Associate ACL to Subnet One
  ##################
  SSHSanitizeAreaSubnetOneACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: 
        Ref: SSHSanitizeAreaSubnetOneACL
      SubnetId: 
        Ref: SSHSanitizeAreaSubnetOne
      
  SSHSanitizeAreaSubnetOneACLEntryOneInbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: SSHSanitizeAreaSubnetOneACL
      RuleNumber: 100
      RuleAction: allow
      Protocol: -1
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1
        To: 65535

  SubnetOneACLEntryOneOutbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: SSHSanitizeAreaSubnetOneACL
      RuleNumber: 100
      RuleAction: allow
      Protocol: -1
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1
        To: 65535




############################################################################
##  SSH Sanitize Area ACCESS CONTROL LIST 2 CONFIGURATION
############################################################################

  ##################
  # SSH Sanitize Area Access Control List 2
  # Layer Type: Network Layer 
  # Description:
  ##################
  SSHSanitizeAreaSubnetTwoACL:
    Type: AWS::EC2::NetworkAcl
    Properties: 
      VpcId: 
        Ref: ProductionVPC
      Tags:
        - Key: Name
          Value: "SSH Sanitize Area ACL 2"


  SubnetTwoACLEntryOneInbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: SSHSanitizeAreaSubnetTwoACL
      RuleNumber: 100
      RuleAction: allow
      Egress: false
      Protocol: -1
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1
        To: 65535


  SubnetTwoACLEntryOneOutbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: SSHSanitizeAreaSubnetTwoACL
      RuleNumber: 100
      RuleAction: allow
      Egress: true
      Protocol: -1
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1
        To: 65535


  ##################
  # SSH Sanitize Area Subnet 2 ACL Association
  # Layer Type: Network Layer 
  # Description: Associate ACL to Public Web Server Subnet Two
  ##################
  SubnetTwoACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: 
        Ref: SSHSanitizeAreaSubnetTwoACL
      SubnetId: 
        Ref: SSHSanitizeAreaSubnetTwo




############################################################################
## APPLICATION LOAD BALANCER
## Layer Type: Network Layer
############################################################################    

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: secure-alb
      Scheme: internet-facing
      Type: application
      IpAddressType: ipv4
      Subnets: 
        - !Ref PrivateWebServerSubnetOne
        - !Ref PrivateWebServerSubnetTwo
      SecurityGroups: 
        - !Ref ProductionVPCALBSecurityGroup
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
        - Key: routing.http2.enabled
          Value: 'true'


  # Target Group
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      TargetType: instance
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: '86400'
      VpcId: 
        Ref: ProductionVPC
      Targets:
        - Id: !GetAtt WebServerOne.InstanceId
          Port: 80
        - Id: !GetAtt WebServerTwo.InstanceId
          Port: 80

  # HTTPS Listener
  ALBHTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP




############################################################################
## SSH Sanitize Area Subnet One NAT GATEWAY
## Layer Type: Network Layer
############################################################################     

  SSHSanitizeAreaSubnetOneNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: 
        Fn::GetAtt: ['SSHSanitizeAreaSubnetOneNATGatewayEIP', 'AllocationId']
      SubnetId: !Ref SSHSanitizeAreaSubnetOne
      Tags:
        - Key: Name
          Value: "SSH Sanitize Area Subnet One NAT Gateway"

  SSHSanitizeAreaSubnetOneNATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc


############################################################################
## SSH Sanitize Area Subnet Two NAT GATEWAY
## Layer Type: Network Layer
############################################################################     

  SSHSanitizeAreaSubnetTwoNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: 
        Fn::GetAtt: ['SSHSanitizeAreaSubnetTwoNatGatewayEIP', 'AllocationId']
      SubnetId: !Ref SSHSanitizeAreaSubnetTwo
      Tags:
        - Key: Name
          Value: "SSH Sanitize Area Subnet Two NAT Gateway"

  SSHSanitizeAreaSubnetTwoNatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc


############################################################################
##  PRIVATE WEB SERVER SUBNET 1 ROUTING TABLE CONFIGURATION
############################################################################

  PrivateWebServerSubnetOneRoutingTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ProductionVPC
      Tags:
        - Key: Name
          Value: "Private Web Server Subnet Routing Table 1"

  PrivateWebServerSubnetRoutingTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: 
        Ref: PrivateWebServerSubnetOneRoutingTable
      SubnetId: 
        Ref: PrivateWebServerSubnetOne


  RouteNATGatewayFromPrivateWebServerSubnetOne:
    Type: AWS::EC2::Route
    Properties:
        RouteTableId: !Ref PrivateWebServerSubnetOneRoutingTable
        DestinationCidrBlock: '0.0.0.0/0'
        NatGatewayId: !Ref SSHSanitizeAreaSubnetOneNATGateway



############################################################################
##  PRIVATE WEB SERVER 2 ROUTING TABLE CONFIGURATION
############################################################################

  PrivateWebServerSubnetTwoRoutingTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ProductionVPC
      Tags:
        - Key: Name
          Value: "Private Web Server Subnet Two Routing Table"

  PrivateWebServerSubnetTwoRoutingTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: 
        Ref: PrivateWebServerSubnetTwoRoutingTable
      SubnetId: 
        Ref: PrivateWebServerSubnetTwo


  RouteNATGatewayToPrivateWebServerSubnetTwo:
    Type: AWS::EC2::Route
    Properties:
        RouteTableId: !Ref PrivateWebServerSubnetTwoRoutingTable
        DestinationCidrBlock: '0.0.0.0/0'
        NatGatewayId: !Ref SSHSanitizeAreaSubnetTwoNATGateway



############################################################################
## Public Web Server Subnet One NAT GATEWAY
## Layer Type: Network Layer
############################################################################     

  PrivateWebServerSubnetOneNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: 
        Fn::GetAtt: ['PrivateWebServerSubnetOneNatGatewayEIP', 'AllocationId']
      SubnetId: !Ref PrivateWebServerSubnetOne
      Tags:
        - Key: Name
          Value: "Public Web Server Subnet One NAT Gateway"

  PrivateWebServerSubnetOneNatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc


############################################################################
## Private Web Server Subnet Two NAT GATEWAY
## Layer Type: Network Layer
############################################################################     

  PrivateWebServerSubnetTwoNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: 
        Fn::GetAtt: ['PrivateWebServerSubnetTwoNatGatewayEIP', 'AllocationId']
      SubnetId: !Ref PrivateWebServerSubnetTwo
      Tags:
        - Key: Name
          Value: "Public Web Server Subnet Two NAT Gateway"

  PrivateWebServerSubnetTwoNatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc


############################################################################
##  PRIVATE DB SUBNET 1 ROUTING TABLE CONFIGURATION
############################################################################

  PrivateDBSubnetOneRoutingTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ProductionVPC
      Tags:
        - Key: Name
          Value: "Private DB Subnet Routing Table 1"

  BackupSubnetRoutingTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: 
        Ref: PrivateDBSubnetOneRoutingTable
      SubnetId: 
        Ref: PrivateDBSubnetOne


  RouteNATGatewayFromPrivateDBSubnetOne:
    Type: AWS::EC2::Route
    Properties:
        RouteTableId: !Ref PrivateDBSubnetOneRoutingTable
        DestinationCidrBlock: '0.0.0.0/0'
        NatGatewayId: !Ref PrivateWebServerSubnetOneNATGateway



############################################################################
##  PRIVATE DB SUBNET 2 ROUTING TABLE CONFIGURATION
############################################################################

  PrivateDBSubnetTwoRoutingTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ProductionVPC
      Tags:
        - Key: Name
          Value: "Private DB Subnet Routing Table 2"

  BackupPrivateSubnetRoutingTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: 
        Ref: PrivateDBSubnetTwoRoutingTable
      SubnetId: 
        Ref: PrivateDBSubnetTwo


  RouteNATGateway:
    Type: AWS::EC2::Route
    Properties:
        RouteTableId: !Ref PrivateDBSubnetTwoRoutingTable
        DestinationCidrBlock: '0.0.0.0/0'
        NatGatewayId: !Ref PrivateWebServerSubnetOneNATGateway



############################################################################
# SECURITY LAYER 
############################################################################



  ##################
  # Bastion Host One Security Group
  # Layer Type: Security Layer 
  # Description:
  ##################

  BastionHostOneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Internet Users to access SSH (Port 22)
      VpcId: 
        Ref: ProductionVPC
      Tags:
        - Key: Name
          Value: "Bastion Host One Security Group"

  BastionHostOneSecurityGroupIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: 
        Ref: BastionHostOneSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0

  ##################
  # Bastion Host Two Security Group
  # Layer Type: Security Layer 
  # Description:
  ##################

  BastionHostTwoSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Internet Users to access SSH (Port 22)
      VpcId: 
        Ref: ProductionVPC
      Tags:
        - Key: Name
          Value: "Bastion Host Two Security Group"

  BastionHostTwoSecurityGroupIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: 
        Ref: BastionHostTwoSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0


  ##################
  # Web Server One Security Group
  # Layer Type: Security Layer 
  # Description:
  ##################
  WebServerOneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Internet users to access HTTP (Port 80)
      VpcId: 
        Ref: ProductionVPC
      Tags:
        - Key: Name
          Value: "Web Server One Security Group"


  WebServerOneSecurityGroupIngressHTTPRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: 
        Ref: WebServerOneSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId:
        Ref: ProductionVPCALBSecurityGroup

  WebServerOneSecurityGroupIngressHTTPSRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: 
        Ref: WebServerOneSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId:
        Ref: ProductionVPCALBSecurityGroup



  ##################
  # Web Server One SSH Security Group
  # Layer Type: Security Layer 
  # Description:
  ##################
  WebServerOneSSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Internet users to access SSH (Port 22)
      VpcId: 
        Ref: ProductionVPC
      Tags:
        - Key: Name
          Value: "Web Server One SSH Security Group"

  WebServerOneSecurityGroupIngressSSHRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: 
        Ref: WebServerOneSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId:
        Ref: BastionHostOneSecurityGroup


  ##################
  # Web Server Two Security Group
  # Layer Type: Security Layer 
  # Description:
  ##################

  WebServerTwoSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Internet Users to access HTTP (Port 80)
      VpcId: 
        Ref: ProductionVPC
      Tags:
        - Key: Name
          Value: "Web Server Two Security Group"

  WebServerTwoSecurityGroupIngressHTTPRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: 
        Ref: WebServerTwoSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId:
        Ref: ProductionVPCALBSecurityGroup
  
  WebServerTwoSecurityGroupIngressHTTPSRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: 
        Ref: WebServerTwoSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId:
        Ref: ProductionVPCALBSecurityGroup


  ##################
  # Web Server Two SSH Security Group
  # Layer Type: Security Layer 
  # Description:
  ##################

  WebServerTwoSSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Internet users to access SSH (Port 22)
      VpcId: 
        Ref: ProductionVPC   
      Tags:
        - Key: Name
          Value: "Web Server Two SSH Security Group"


  WebServerTwoSecurityGroupIngressSSHRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: 
        Ref: WebServerTwoSSHSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId:
        Ref: BastionHostTwoSecurityGroup


  ##################
  # Application Load Balancer Security Group
  # Layer Type: Security Layer 
  # Description:
  ##################

  ProductionVPCALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB allowing internet user to access port 80
      VpcId: 
        Ref: ProductionVPC
      Tags:
        - Key: Name
          Value: "Production VPC ALB Security Group"

  ProductionVPCALBSecurityGroupIngressHTTPRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: 
        Ref: ProductionVPCALBSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0


  ProductionVPCALBSecurityGroupIngressHTTPSRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: 
        Ref: ProductionVPCALBSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0



############################################################################
## KEY PAIR (SECURITY LAYER)
############################################################################
  
  BastionHostOneKeyPair:
    Type: 'AWS::EC2::KeyPair'
    Properties:
      KeyName: BastionHostOneKeyPair

  BastionHostTwoKeyPair:
    Type: 'AWS::EC2::KeyPair'
    Properties:
      KeyName: BastionHostTwoKeyPair


  WebServerOneKeyPair:
    Type: 'AWS::EC2::KeyPair'
    Properties:
      KeyName: WebServerOneKeyPair

  WebServerTwoKeyPair:
    Type: 'AWS::EC2::KeyPair'
    Properties:
      KeyName: WebServerTwoKeyPair


############################################################################
# COMPUTE LAYER 
############################################################################

  ##################
  # Bastion Host 1
  # Layer Type: Compute Layer 
  # Description: To authenticate any user accessing from the internet via SSH by multi-factor authentication 
  ##################
  BastionHostOne:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - update_yum_and_install_aws_cfn_bootstrap
            - install_packages
        update_yum_and_install_aws_cfn_bootstrap:
          commands:
            01_update_yum:
              command: "yum update -y"
            02_install_aws_cfn_bootstrap:
              command: "yum install -y aws-cfn-bootstrap"


    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref LatestAL2023AmiId
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 10
            VolumeType: gp3
            DeleteOnTermination: true
            Encrypted: true
      Monitoring: true
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - !Ref BastionHostOneSecurityGroup
          SubnetId: !Ref SSHSanitizeAreaSubnetOne
      KeyName: !Ref BastionHostOneKeyPair
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe

              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerTwo --region ${AWS::Region}
              /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerTwo --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: Bastion Host One



  ##################
  # Bastion Host 2
  # Layer Type: Compute Layer 
  # Description: To authenticate any user accessing from the internet via SSH by multi-factor authentication 
  ##################

  BastionHostTwo:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - update_yum_and_install_aws_cfn_bootstrap
        update_yum_and_install_aws_cfn_bootstrap:
          commands:
            01_update_yum:
              command: "yum update -y"
            02_install_aws_cfn_bootstrap:
              command: "yum install -y aws-cfn-bootstrap"


    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref LatestAL2023AmiId
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 10
            VolumeType: gp3
            DeleteOnTermination: true
            Encrypted: true
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - !Ref BastionHostTwoSecurityGroup
          SubnetId: !Ref SSHSanitizeAreaSubnetTwo
      Monitoring: true
      KeyName: !Ref BastionHostTwoKeyPair
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe


              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource BastionHostTwo --region ${AWS::Region}
              /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource BastionHostTwo --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: Bastion Host Two




  ##################
  # Web Server One EC2
  # Layer Type: Compute Layer 
  # Description:
  ##################



  WebServerOne:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - update_yum_and_install_aws_cfn_bootstrap
            - install_httpd_and_configure
            - install_telnet
            
        update_yum_and_install_aws_cfn_bootstrap:
          commands:
            01_update_yum:
              command: "dnf update -y"
            02_install_aws_cfn_bootstrap:
              command: "yum install -y aws-cfn-bootstrap"
        install_httpd_and_configure:
          packages:
            yum:
              httpd: []
          files:
            "/var/www/html/index.html":
              content: |
                <html>
                  <body>
                    <h1>Hello From Your Web Server 1</h1>
                  </body>
                </html>
              mode: "000644"
              owner: "apache"
              group: "apache"
          services:
            sysvinit:
              httpd:
                enabled: "true"
                ensureRunning: "true"
        install_telnet:
          packages:
            yum:
              telnet: []
          services:
            sysvinit:
              telnet:
                enabled: "true"
                ensureRunning: "true"


    Properties:
      InstanceType:
        Ref: InstanceType
      ImageId: 
        Ref: LatestAL2023AmiId
      KeyName: 
        Ref: WebServerOneKeyPair
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 10
            VolumeType: gp3
            DeleteOnTermination: true
            Encrypted: true
      SecurityGroupIds:
        - !Ref WebServerOneSecurityGroup
        - !Ref WebServerOneSSHSecurityGroup
      Monitoring: true
      SubnetId: !Ref PrivateWebServerSubnetOne
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe

              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerOne --region ${AWS::Region}
              /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerOne --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: Web Server One


  ##################
  # Web Server Two EC2
  # Layer Type: Compute Layer 
  # Description:
  ##################

  WebServerTwo:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - update_yum_and_install_aws_cfn_bootstrap
            - install_httpd_and_configure
            - install_telnet

        update_yum_and_install_aws_cfn_bootstrap:
          commands:
            01_update_yum:
              command: "yum update -y"
            02_install_aws_cfn_bootstrap:
              command: "yum install -y aws-cfn-bootstrap"
        install_httpd_and_configure:
          packages:
            yum:
              httpd: []
          files:
            "/var/www/html/index.html":
              content: |
                <html>
                  <body>
                    <h1>Hello From Your Web Server 2</h1>
                  </body>
                </html>
              mode: "000644"
              owner: "apache"
              group: "apache"
          services:
            sysvinit:
              httpd:
                enabled: "true"
                ensureRunning: "true"
        install_telnet:
          packages:
            yum:
              telnet: []
          services:
            sysvinit:
              telnet:
                enabled: "true"
                ensureRunning: "true"

        

    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref LatestAL2023AmiId
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 10
            VolumeType: gp3
            DeleteOnTermination: true
            Encrypted: true
      SecurityGroupIds:
        - !Ref WebServerTwoSecurityGroup
        - !Ref WebServerTwoSSHSecurityGroup
      SubnetId: !Ref PrivateWebServerSubnetTwo
      KeyName: !Ref WebServerTwoKeyPair
      Monitoring: true
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe

              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerTwo --region ${AWS::Region}
              /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerTwo --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: Web Server Two




############################################################################
# OUTPUT
############################################################################
Outputs:

  WebServerOneInstanceId:
    Value: !GetAtt WebServerOne.InstanceId
    Export:
      Name: "Web-Server-One-EC2-Instance-ID"

  WebServerOnePrivateIP:
    Value: !GetAtt WebServerOne.PrivateIp
    Export:
      Name: "Web-Server-One-Private-IP"

  WebServerOnePrivateDNSName:
    Value: !GetAtt WebServerOne.PrivateDnsName
    Export:
      Name: "Web-Server-One-Private-DNS-Name"

  WebServerOneKeyPairId:
    Value: !GetAtt WebServerOneKeyPair.KeyPairId
    Export:
      Name: "Web-Server-One-Key-Pair-ID"

  WebServerTwoInstanceId:
    Value: !GetAtt WebServerTwo.InstanceId
    Export:
      Name: "Web-Server-Two-EC2-Instance-ID"

  WebServerTwoPrivateIP:
    Value: !GetAtt WebServerTwo.PrivateIp
    Export:
      Name: "Web-Server-Two-Private-IP"

  WebServerTwoPrivateDNSName:
    Value: !GetAtt WebServerTwo.PrivateDnsName
    Export:
      Name: "Web-Server-Two-Private-DNS-Name"

  WebServerTwoKeyPairId:
    Value: !GetAtt WebServerTwoKeyPair.KeyPairId
    Export:
      Name: "Web-Server-Two-Key-Pair-ID"

  BastionHostOneKeyPairId:
    Value: !GetAtt BastionHostOneKeyPair.KeyPairId
    Export:
      Name: "Bastion-Host-One-Key-Pair-ID"

  BastionHostTwoKeyPairId:
    Value: !GetAtt BastionHostTwoKeyPair.KeyPairId
    Export:
      Name: "Bastion-Host-Two-Key-Pair-ID"

  

  # SubnetOneACLID:
  #   Value: !GetAtt SubnetOneACL.Id
  #   Export:
  #     Name: "Subnet-One-ACL-ID"

  # SubnetTwoACLID:
  #   Value: !GetAtt SubnetTwoACL.Id
  #   Export:
  #     Name: "Subnet-Two-ACL-ID"

  # ProductionVPCSubnetOneAZ:
  #   Value: !GetAtt ProductionVPCSubnetOne.AvailabilityZone
  #   Export:
  #     Name: "Production-VPC-Subnet-One-Availability-Zone"

  # ProductionVPCSubnetOneCidrBlock:
  #   Value: !GetAtt ProductionVPCSubnetOne.CidrBlock
  #   Export:
  #     Name: "Production-VPC-Subnet-One-Network-Address"


  # ProductionVPCSubnetOneID:
  #   Value:  !GetAtt ProductionVPCSubnetOne.SubnetId
  #   Export:
  #     Name: "Production-VPC-Subnet-One-ID"

  # ProductionVPCSubnetOneNetworkAclAssociationId:
  #   Value: !GetAtt ProductionVPCSubnetOne.NetworkAclAssociationId
  #   Export:
  #     Name: "Production-VPC-Subnet-One-Network-ACL-Association-ID"


  # ProductionVPCSubnetTwoAZ:
  #   Value: !GetAtt ProductionVPCSubnetTwo.AvailabilityZone
  #   Export:
  #     Name: "Production-VPC-Subnet-Two-Availability-Zone"

  # ProductionVPCSubnetTwoCidrBlock:
  #   Value: !GetAtt ProductionVPCSubnetTwo.CidrBlock
  #   Export:
  #     Name: "Production-VPC-Subnet-Two-Network-Address"

  # ProductionVPCSubnetTwoID:
  #   Value:  !GetAtt ProductionVPCSubnetTwo.SubnetId
  #   Export:
  #     Name: "Production-VPC-Subnet-Two-ID"

  # ProductionVPCSubnetTwoNetworkAclAssociationId:
  #   Value: !GetAtt ProductionVPCSubnetTwo.NetworkAclAssociationId
  #   Export:
  #     Name: "Production-VPC-Subnet-Two-Network-ACL-Association-ID"



  # ProductionVPCBackupPublicSubnetAZ:
  #   Value: !GetAtt ProductionVPCBackupPublicSubnet.AvailabilityZone
  #   Export:
  #     Name: "Production-VPC-Backup-Public-Subnet-Availability-Zone"

  # ProductionVPCBackupPublicSubnetCidrBlock:
  #   Value: !GetAtt ProductionVPCBackupPublicSubnet.CidrBlock
  #   Export:
  #     Name: "Production-VPC-Backup-Public-Subnet-Two-Network-Address"

  # ProductionVPCBackupPublicSubnetID:
  #   Value: !GetAtt ProductionVPCBackupPublicSubnet.SubnetId
  #   Export:
  #     Name: "Production-VPC-Backup-Public-Subnet-ID"

  # ProductionVPCBackupPublicSubnetNetworkAclAssociationId:
  #   Value: !GetAtt ProductionVPCBackupPublicSubnet.NetworkAclAssociationId
  #   Export:
  #     Name: "Production-VPC-Backup-Public-Subnet-Network-ACL-Association-ID"


  # ProductionVPCBackupPrivateSubnetAZ:
  #   Value: !GetAtt ProductionVPCBackupPrivateSubnet.AvailabilityZone
  #   Export:
  #     Name: "Production-VPC-Backup-Private-Subnet-Availability-Zone"

  # ProductionVPCBackupPrivateSubnetCidrBlock:
  #   Value: !GetAtt ProductionVPCBackupPrivateSubnet.CidrBlock
  #   Export:
  #     Name: "Production-VPC-Backup-Private-Subnet-Two-Network-Address"

  # ProductionVPCBackupPrivateSubnetID:
  #   Value: !GetAtt ProductionVPCBackupPrivateSubnet.SubnetId
  #   Export:
  #     Name: "Production-VPC-Backup-Private-Subnet-ID"

  # ProductionVPCBackupPrivateSubnetNetworkAclAssociationId:
  #   Value: !GetAtt ProductionVPCBackupPrivateSubnet.NetworkAclAssociationId
  #   Export:
  #     Name: "Production-VPC-Backup-Private-Subnet-Network-ACL-Association-ID"


  ApplicationLoadBalancerDNS:
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: "Application-Load-Balancer-DNS-Name"
  
  ApplicationLoadBalancerARN:
    Value: !GetAtt ApplicationLoadBalancer.LoadBalancerArn
    Export:
      Name: "Application-Load-Balancer-ARN"


  InternetGatewayId:
    Value: !GetAtt ProductionVPCInternetGateway.InternetGatewayId
    Export:
      Name: "ProductionVPCInternetGateway-ID"

  ProductionVPCID:
    Value: !GetAtt ProductionVPC.VpcId
    Export:
      Name: "Production-VPC-ID"

  ProductionVPCCidrBlock:
    Value: !GetAtt ProductionVPC.CidrBlock
    Export:
      Name: "Production-VPC-Network-Address"

  ProductionVPCCidrBlockAssociations:
    Value: 
      !Join 
      - '; '
      - !GetAtt ProductionVPC.CidrBlockAssociations
    Export:
      Name: "Production-VPC-CIDR-Block-Associations"
